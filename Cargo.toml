[package]
name = "ramparts"
version = "0.7.0"
edition = "2021"
authors = ["Sharath Rajasekar <sharath@getjavelin.com>"]
description = "A CLI tool for scanning Model Context Protocol (MCP) servers"
license = "Apache-2.0"
repository = "https://github.com/getjavelin/ramparts"
keywords = ["mcp", "scanner", "cli", "llm", "security"]
categories = ["command-line-utilities", "network-programming"]
include = ["src/**/*", "LICENSE", "README.md", "build.rs"]

# Cargo-release configuration for semantic versioning
[package.metadata.release]
# Allow releases from main/master branch
allow-branch = ["main", "master"]
# Create git tags
tag = true
# Push to remote
push = true
# Tag name format
tag-name = "v{version}"
# Sign commits and tags
sign-commit = false
sign-tag = false

[features]
default = ["yara-x-scanning"]
yara-x-scanning = ["yara-x", "glob"]

[dependencies]
# CLI argument parsing
clap = { workspace = true, features = ["derive"] }

# Async runtime
tokio = { workspace = true, features = ["full"] }

# HTTP client
reqwest = { workspace = true, default-features = false, features = ["json", "rustls-tls", "stream"] }

# Async streams
futures-util = { workspace = true }
futures = { workspace = true }

# JSON handling
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_yaml = "0.9"
sha2 = { workspace = true }
schemars = { workspace = true }

# Logging
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["env-filter"] }

# Error handling
anyhow = { workspace = true }
thiserror = { workspace = true }

# URL parsing
url = { workspace = true }

# Regular expressions for environment variable expansion
regex = { workspace = true }

# Time handling
chrono = { workspace = true, features = ["serde"] }

# Table formatting for output
tabled = "0.20"

# Configuration
config = { workspace = true }

# Directory handling
dirs = { workspace = true }

# File pattern matching for dynamic YARA rules
glob = { version = "0.3", optional = true }

# Color output
colored = "2.0"
spinners = "4.1.1"

# Web framework for microservice
axum = { workspace = true, features = ["macros"] }
tower-http = { workspace = true, features = ["cors", "trace"] }
tower = { workspace = true }

# JSON-RPC handling for microservice
jsonrpc-core = "18.0"
yara-x = { version = "1.4", optional = true }

# Official Rust MCP SDK
# Official Rust MCP SDK (client + server)
# Enable server + macros and server stdio transport for MCP server implementation
rmcp = { version = "0.3.2", features = [
    "client",
    "server",
    "macros",
    "schemars",
    "reqwest",
    # client transports already used by scanner
    "transport-child-process",
    "transport-streamable-http-client",
    "transport-sse-client",
    "transport-worker",
    # server transports for MCP server (starting with stdio)
    "transport-io",
    # add SSE and streamable HTTP server transports
    "transport-sse-server",
    "transport-streamable-http-server",
    "transport-streamable-http-server-session"
] }

# Random number generation for request IDs
rand = { workspace = true }

[build-dependencies]
chrono = "0.4"

[dev-dependencies]
tokio-test = "0.4"
tempfile = "3.8"
axum = "0.7"
